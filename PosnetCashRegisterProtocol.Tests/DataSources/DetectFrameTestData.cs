using PosnetCashRegisterProtocol.Enums;
using System.Collections;

namespace PosnetCashRegisterProtocol.Tests.DataSources;

public class DetectFrameTestData : IEnumerable<object[]>
{
    private readonly Random _random = new(DateTime.Now.Millisecond);

    public IEnumerator<object[]> GetEnumerator()
    {
        var testFrames = new[]
        {
            new byte[] { 0x10, 0x02, 0x00, 0x00, 0x28, 0x00, 0x00, 0x80, 0x10, 0x10, 0x00, 0x00, 0x00, 0x32, 0x01, 0xED, 0xB1, 0x10, 0x03 },
            [0x10, 0x02, 0x00, 0x00, 0x29, 0x00, 0x00, 0x80, 0x10, 0x10, 0x00, 0x00, 0x00, 0x14, 0x00, 0xC9, 0x62, 0x10, 0x03],
            [0x10, 0x02, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x80, 0x23, 0x00, 0x04, 0x00, 0x28, 0x0A, 0x56, 0x01, 0x00, 0x53, 0x6B, 0x69, 0x6C, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x00, 0x53, 0x6B, 0x67, 0x00, 0x42, 0x01, 0xC3, 0x62, 0x10, 0x03],
            [0x10, 0x02, 0x00, 0x00, 0xEF, 0x05, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x56, 0x13, 0x00, 0xA1, 0x41, 0x10, 0x03],
            [0x10, 0x02, 0x00, 0x00, 0xEF, 0x05, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x87, 0x73, 0x10, 0x03],
            [0x10, 0x02, 0x00, 0x00, 0xF2, 0x05, 0x00, 0x80, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x56, 0x28, 0x0A, 0x56, 0x00, 0x00, 0x56, 0x8D, 0x03, 0x56, 0xFF, 0xFF, 0x14, 0x7C, 0x10, 0x03]
        };

        foreach (var frame in testFrames)
        {
            var bytes = new byte[500];
            var index = _random.Next(bytes.Length - frame.Length);

            _random.NextBytes(bytes);

            for (int i = 0; i < bytes.Length - 1; i++)
            {
                if (bytes[i] == (byte)ESpecialChar.SYN)
                {
                    bytes[i + 1] = _random.Next(2) switch
                    {
                        0 => (byte)ESpecialChar.SYN,
                        _ => (byte)ESpecialChar.STX,
                    };
                }
            }

            if (index > 0 && bytes[index - 1] == (byte)ESpecialChar.SYN)
            {
                frame[index - 1] = 0;
            }

            frame.CopyTo(bytes, index);

            yield return new object[] { bytes, frame };
        }
    }

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
}
